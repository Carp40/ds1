#+TITLE: INTRODUCTION TO R
#+AUTHOR: R Installation and First Steps
#+SUBTITLE: Introduction to Data Science DSC 105 Fall 2024
#+startup: hideblocks overview indent inlineimages
#+ATTR_HTML: :width 200px
#+CAPTION: RStudio Ball Logo (Source: rstudio.com)
[[../img/3_rstudioball.png]]
* Overview
#+ATTR_HTML: :width 600px
#+CAPTION: Bridge and Waterfall at Pontoise (Cezanne, 1881)
[[../img/3_cezanne.jpg]]

- Why are we using R?
- Getting in/out of R
- Installing R on Windows and Mac
- R Packages and libraries

  #+begin_notes
  Inspiration and ideas especially from [[davies][Davies(2016)]] and other places
  gratefully received (see [[references][references]]).
  #+end_notes

* Why we are using R
#+NAME: fig:tiobe
#+ATTR_HTML: :width 600px
[[../img/3_tiobe.png]]

- One of the 'big three' (Python, R, SQL)
- FOSS and especially open to non-programmers
- Strong on analysis and visualization

[[https://www.tiobe.com/tiobe-index/][Image Source: TIOBE.com/index - Check some of these languages out!]]
Image is from 2021. Update 2024: R fell back to position 19.

If you don't want to leave Emacs, you can also use the =eww= browser.

#+begin_notes
When it comes to data analysis, three languages are mentioned most
often: R, Python and SQL. All three have their relative merits and
issues.

I chose R as the programming language for this introductory
course. The choice is partly *personal* and partly
*professional*. /Personal:/ I like it and it's new for me (I've only
taught it since early 2020), so I am still excited about it. It's good
if your instructor is excited about the material!  /Professional:/ as
business professionals, you don't want to have to be programmers. At
the same time, you need to be able to speak with experts and do and
extend your own analyses (not be restricted for example by
dashboards).

On a /practical/ note, R has a very large, diverse user and developer
community. Unlike Python, many of the users do not have a technology
background. This means that the "world of R" is more easily
accessible if digital technologies and programming aren't your main
interests. The SQL community is probably even larger and even more
diverse (databases being a more general interest than even
statistical analysis), but the language SQL itself is hardly
extensible, very focused on querying and less on visualization.

In reality, as a data scientist, or even as a business practitioner
with serious, systematic data analytics interests, you need to know
all of these - R, SQL, and Python. Here, we'll start with R.

For a direct comparison of Python and R for data cleaning and
exploratory analysis with examples, see e.g. [[radecic][Radecic (2020)]], [[uprety][Uprety
(2020)]] and [[shotwell][Shotwell (2020)]]. To see how R outperforms Python, see
[[grogan][Grogan (2020)]]. To see some equivalents of SQL in R, check ODSC
(2018). And for an overview of data science tools beyond Python, R,
and SQL, see [[gallatin][Gallatin (2018)]]. And here's a neat [[https://www.datacamp.com/community/tutorials/r-or-python-for-data-analysis][infographic]] from
datacamp comparing both for data analysis.

There are downsides to using R as well, of course, and it has been
called "hard to learn", too ([[muenchen][Muenchen 2017]]), partly and
paradoxically because the language is so flexible and
extensible. Also, some innovations, like the Tidyverse, aren't
necessarily good for beginners ([[matloff][Matloff 2019]]).

Of course, there's also always an index - in this case the "TIOBE"
index of programming language popularity (based on the languages
people search for), see figure [[fig:tiobe]]. As you can see, R improved
its position in one year from 20th to 8th. That's by far the
strongest improvement of any language among the top 10. Still,
Python is three times more search-successful. Neither Python nor SQL
have changed their position compared to one year ago. The popularity
of R quite likely rides on the popularity of statistics due to the
interest in COVID-19 data analysis.

#+end_notes

* Matloff's 10 reasons

#+name: fig:matloff
#+attr_html: :width 600px
[[../img/3_tarp.png]]

Source: [[https://nostarch.com/artofr.htm][The Art of R Programming (2011)]]

Things you should know the definition of (roughly):
- Public domain
- OOP and functional programming
- Command history
- Command-line

* Obtaining and installing R from cran

URL: https://cran.r-project.org/mirrors.html

#+NAME: fig:cran_mirrors
#+ATTR_HTML: :width 600 px
[[../img/3_cran.png]]

- CRAN = "Comprehensive R Archive Network" at [[https://www.r-project.org][r-project.org]]

- Use /[[https://cran.r-project.org/mirrors.html][mirror sites]]/ (*what's that?*) for download (open browser)

- Practice: on the CLI, check for updates of everything:
  #+begin_example bash
  sudo apt update -y && sudo apt upgrade -y
    #+end_example

#+begin_notes

You can download the installer for your operating system from your
local CRAN ("*Comprehensive R Archive Network*") mirror here:
https://cran.r-project.org/mirrors.html.

For example, if you are in Berlin, the NÃ¼rnberg server is closest:
https://ftp.fau.de/cran/.

*Challenge:* Which server would you use if you were in Russia?  Does
the download page for that server look any different? Check it out!
[[mirror][(Hint)]]

USA: notice that the TX server is at "revolutionanalytics.com",
which used to be another R IDE bought by Microsoft. Microsoft
embraced R so fiercely that they even started their own subset of
it, Microsoft R Open, which you can get from MRAN (Microsoft R
Application Network). *Can you discern the strategy here?* You can
get it by reading [[https://cloudblogs.microsoft.com/sqlserver/2021/06/30/looking-to-the-future-for-r-in-azure-sql-and-sql-server/][this series of news flashes]] from Microsoft.

*Which other open source related platforms are now Microsoft?*
Answer: GitHub

#+end_notes

** How this looks under windows

#+ATTR_HTML: :width 600px
[[../img/3_windows.png]]
#+begin_notes
I tried this on Lenovo and Dell laptops running Windows 10 and it
worked:

1) After opening the ~R..win.exe~ file, a popup asks you if you
   will let this pogram modify your hard disk. Say "yes" (why is
   this necessary?[fn:1])
2) In the installation dialog, accept all settings and check the
   options for establishing a desktop shortcut and a quick launch
   icon.
3) The location of your R program files will be ~C:\Program
   Files\R~. Once the installation is finished, you should have an
   icon on your desktop named ~Rx64 4.0.2~ (or whatever your
   version is).
4) Double click it to open the R console for the first time. At the
   ~>~ prompt, type ~1+1~ and ~RETURN~ to see if R can
   compute. Then type ~demo(graphics)~ and hit ~RETURN~ ("~Enter~")
   repeatedly to see a few R plots.
5) I also switched from my integrated (default) graphics card to a
   "High Performance NVIDIA" graphics card (which I did not know I
   had!).
6) To leave, type ~q()~ at the prompt or leave with the ~File >
   Exit~ graphical menu. When asked if you wish to save the
   workspace, say "no".
7) When installing a program, a dialog was opened offering me to
   install packages in a local folder (accept this with "yes").

   See [[https://www.datacamp.com/community/tutorials/installing-R-windows-mac-ubuntu][this datacamp blog post (March 11, 2020)]] for installation
   instruction for Windows, MacOS X and Ubuntu (Linux).

   -----

   /(If you have other troubles with R + MacOS, let me know. I have a
   Mac available and may be able to figure something out.)/
#+end_notes

** How this looks on a mac
#+ATTR_HTML: :width 600px
[[../img/3_macos.png]]

#+begin_notes

[[https://www.verouden.net/post/2020/04/08/r-installation-macos/][New installation & reconfiguration (2020)]]

I did this on a MacMini (2014) running MacOS 10.13.6 without too
many problems (see below). Essentially the only problem occurred
when trying to install packages (discussed later) and I could fix it
easily by changing a system setting.

1) To download and install R for MacOS, go to ~r-project.org~, and
   click on ~CRAN~ right below the ~Download~ headline. The CRAN
   mirror page opens. Scroll down to find a German mirror site and
   click to download the ~.DMG~ installer file, which will install
   the program.

2) There were system-level error messages though the program
   installed alright. But I could not install CRAN packages because
   of this error: ~tar: Failed to set default locale~. This refers
   to a problem with the ~tar~ unzip program. I checked
   ~stackoverflow.com~ and found a fix that in turn directed me back
   to a [[https://cran.r-project.org/bin/macosx/RMacOSX-FAQ.html#Internationalization-of-the-R_002eapp][CRAN helpfile]] with lots (too much, really) information for
   Mac users.

3) To fix the problem, close R, open a terminal and type: ~defaults
   write org.R-project.R force.LANG en_US.UTF-8~. Then restart R and
   the problem should have disappeared (it did for me and never came
   back).

   See also [[https://www.datacamp.com/community/tutorials/installing-R-windows-mac-ubuntu][this datacamp blog post (March 11, 2020)]] for installation
   instruction for Windows, MacOS X and Ubuntu (Linux).

/(If you have other troubles with R + MacOS, (don't) let me know. I
have a Mac available and may be able to figure something out.)/

#+end_notes

* Installing R on your PC at home

#+attr_html: :width 420px
[[../img/3_practice.png]]

- See FAQ on GitHub (birkenkrahe/org)
- Linux: =sudo apt install r-base && sudo apt install emacs=
- Windows or Mac: You need Emacs from [[https://emacs-modified.gitlab.io/][emacs-modified.gitlab.io]]
- You need my ~.emacs~ file from tinyurl.com/lyon-emacs
- Come to my office hours for help (tinyurl.com/fall24-office-hours)

* Practice: Find R on your machine & run R scripts

Open a terminal to execute the following shell commands. Do either:
- Open a "dumb" terminal outside of Emacs
- Open a "smart" terminal inside Emacs (=M-x shell=)
- Create an Org-mode file with =bash= code blocks (like here)


1. Check where the R executable is located:
   #+begin_src bash :results output :exports both
     which R
   #+end_src

   #+RESULTS:
   : /usr/bin/R

   The location of applications is stored in the ~$PATH~ (environmental
   variable):
   #+begin_src bash :results output
     echo $PATH
   #+end_src

   #+RESULTS:
   : /home/marcus/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin

2. View the top of the file:
   #+begin_src bash :results output :exports both
     cat /usr/bin/R | head -10
   #+end_src

   #+RESULTS:
   #+begin_example
   #!/bin/bash
   # Shell wrapper for R executable.

   R_HOME_DIR=/usr/lib/R
   if test "${R_HOME_DIR}" = "/usr/lib/R"; then
      case "linux-gnu" in
      linux*)
        run_arch=`uname -m`
        case "$run_arch" in
           x86_64|mips64|ppc64|powerpc64|sparc64|s390x)
   #+end_example

3. The R files are contained in =$R_HOME_DIR=, which is =/usr/lib/R=

4. Now look for the =Rscript= program:
   #+begin_src bash :results output :exports both
     which Rscript
   #+end_src

   #+RESULTS:
   : /usr/bin/Rscript

5. Create an R test file =test.R= on the shell list and view it:
   #+begin_src bash :results output :exports both
     echo "str(mtcars)" > test.R
     ls -l test.R
     cat test.R
   #+end_src

   #+RESULTS:
   : -rw-rw-r-- 1 marcus marcus 12 Sep  9 11:37 test.R
   : str(mtcars)

6. Run the file on the command line as a script:
   #+begin_src bash :results output :exports both
     Rscript test.R
   #+end_src

   #+RESULTS:
   #+begin_example
   'data.frame':        32 obs. of  11 variables:
    $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
    $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
    $ disp: num  160 160 108 258 360 ...
    $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
    $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
    $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
    $ qsec: num  16.5 17 18.6 19.4 17 ...
    $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
    $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
    $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
    $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
   #+end_example

7. Run the file as a batch job (in the background):
   #+begin_src bash :results none :exports both
     R CMD BATCH test.R
   #+end_src

8. The results are stored in a file: =testR.out=:
   #+begin_src bash :results output :exports both
     cat test.Rout
   #+end_src

   #+RESULTS:
   #+begin_example

   R version 4.1.2 (2021-11-01) -- "Bird Hippie"
   Copyright (C) 2021 The R Foundation for Statistical Computing
   Platform: x86_64-pc-linux-gnu (64-bit)

   R is free software and comes with ABSOLUTELY NO WARRANTY.
   You are welcome to redistribute it under certain conditions.
   Type 'license()' or 'licence()' for distribution details.

     Natural language support but running in an English locale

   R is a collaborative project with many contributors.
   Type 'contributors()' for more information and
   'citation()' on how to cite R or R packages in publications.

   Type 'demo()' for some demos, 'help()' for on-line help, or
   'help.start()' for an HTML browser interface to help.
   Type 'q()' to quit R.

   > str(mtcars)
   'data.frame':        32 obs. of  11 variables:
    $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
    $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
    $ disp: num  160 160 108 258 360 ...
    $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
    $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
    $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
    $ qsec: num  16.5 17 18.6 19.4 17 ...
    $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
    $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
    $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
    $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
   >
   > proc.time()
      user  system elapsed
     0.343   0.053   0.373
   #+end_example

* R shell: Version and platform
#+NAME: fig:cli-1
#+attr_html: :width 550px:
n[[../img/3_opening_R_1.png]]

- What type of bit-architecture do you have?
  #+begin_src bash :results output :exports both
    uname -m
  #+end_src

  #+RESULTS:
  : x86_64

- The =uname= command prints system information. In Emacs, run =M-x man
  RET uname= to access the manual page.

- To find out more about your system, enter
  #+begin_src bash :results output
    cat /etc/os-release
  #+end_src

  #+RESULTS:
  #+begin_example
  NAME="Linux Mint"
  VERSION="21.3 (Virginia)"
  ID=linuxmint
  ID_LIKE="ubuntu debian"
  PRETTY_NAME="Linux Mint 21.3"
  VERSION_ID="21.3"
  HOME_URL="https://www.linuxmint.com/"
  SUPPORT_URL="https://forums.linuxmint.com/"
  BUG_REPORT_URL="http://linuxmint-troubleshooting-guide.readthedocs.io/en/latest/"
  PRIVACY_POLICY_URL="https://www.linuxmint.com/"
  VERSION_CODENAME=virginia
  UBUNTU_CODENAME=jammy
  #+end_example

- You can also look at CPU information:
  #+begin_src bash :results output
    cat /proc/cpuinfo
  #+end_src

  #+RESULTS:
  #+begin_example
  processor     : 0
  vendor_id     : GenuineIntel
  cpu family    : 6
  model         : 78
  model name    : Intel(R) Core(TM) i3-6006U CPU @ 2.00GHz
  stepping      : 3
  microcode     : 0xf0
  cpu MHz               : 1300.002
  cache size    : 3072 KB
  physical id   : 0
  siblings      : 4
  core id               : 0
  cpu cores     : 2
  apicid                : 0
  initial apicid        : 0
  fpu           : yes
  fpu_exception : yes
  cpuid level   : 22
  wp            : yes
  flags         : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust sgx bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d arch_capabilities
  vmx flags     : vnmi preemption_timer invvpid ept_x_only ept_ad ept_1gb flexpriority tsc_offset vtpr mtf vapic ept vpid unrestricted_guest ple pml
  bugs          : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit srbds mmio_stale_data retbleed gds
  bogomips      : 3999.93
  clflush size  : 64
  cache_alignment       : 64
  address sizes : 39 bits physical, 48 bits virtual
  power management:

  processor     : 1
  vendor_id     : GenuineIntel
  cpu family    : 6
  model         : 78
  model name    : Intel(R) Core(TM) i3-6006U CPU @ 2.00GHz
  stepping      : 3
  microcode     : 0xf0
  cpu MHz               : 2000.000
  cache size    : 3072 KB
  physical id   : 0
  siblings      : 4
  core id               : 1
  cpu cores     : 2
  apicid                : 2
  initial apicid        : 2
  fpu           : yes
  fpu_exception : yes
  cpuid level   : 22
  wp            : yes
  flags         : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust sgx bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d arch_capabilities
  vmx flags     : vnmi preemption_timer invvpid ept_x_only ept_ad ept_1gb flexpriority tsc_offset vtpr mtf vapic ept vpid unrestricted_guest ple pml
  bugs          : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit srbds mmio_stale_data retbleed gds
  bogomips      : 3999.93
  clflush size  : 64
  cache_alignment       : 64
  address sizes : 39 bits physical, 48 bits virtual
  power management:

  processor     : 2
  vendor_id     : GenuineIntel
  cpu family    : 6
  model         : 78
  model name    : Intel(R) Core(TM) i3-6006U CPU @ 2.00GHz
  stepping      : 3
  microcode     : 0xf0
  cpu MHz               : 1300.000
  cache size    : 3072 KB
  physical id   : 0
  siblings      : 4
  core id               : 0
  cpu cores     : 2
  apicid                : 1
  initial apicid        : 1
  fpu           : yes
  fpu_exception : yes
  cpuid level   : 22
  wp            : yes
  flags         : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust sgx bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d arch_capabilities
  vmx flags     : vnmi preemption_timer invvpid ept_x_only ept_ad ept_1gb flexpriority tsc_offset vtpr mtf vapic ept vpid unrestricted_guest ple pml
  bugs          : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit srbds mmio_stale_data retbleed gds
  bogomips      : 3999.93
  clflush size  : 64
  cache_alignment       : 64
  address sizes : 39 bits physical, 48 bits virtual
  power management:

  processor     : 3
  vendor_id     : GenuineIntel
  cpu family    : 6
  model         : 78
  model name    : Intel(R) Core(TM) i3-6006U CPU @ 2.00GHz
  stepping      : 3
  microcode     : 0xf0
  cpu MHz               : 1300.003
  cache size    : 3072 KB
  physical id   : 0
  siblings      : 4
  core id               : 1
  cpu cores     : 2
  apicid                : 3
  initial apicid        : 3
  fpu           : yes
  fpu_exception : yes
  cpuid level   : 22
  wp            : yes
  flags         : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust sgx bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d arch_capabilities
  vmx flags     : vnmi preemption_timer invvpid ept_x_only ept_ad ept_1gb flexpriority tsc_offset vtpr mtf vapic ept vpid unrestricted_guest ple pml
  bugs          : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit srbds mmio_stale_data retbleed gds
  bogomips      : 3999.93
  clflush size  : 64
  cache_alignment       : 64
  address sizes : 39 bits physical, 48 bits virtual
  power management:

  #+end_example


#+begin_notes
This is the first screen you see (figure [[fig:cli-1]]) after starting R
on the command-line. The highlighted section shows the current
(June 2020) version of Base-R, as the core R program is officially
called. Versions get their own names, like operating systems (my
Ubuntu Linux operating system e.g. has the version number ~18.04-LTS~
and the name "Bionic Beaver"). ~R 4.0.2~ is also called "Taking Off
Again". Lastly, the platform of the operating system on which the R
program runs, is shown - a 64-bit version of Linux using the [[https://en.wikipedia.org/wiki/X86-64][x86
computer architecture]].

*Challenge:* what type of computer architecture does your computer
have (most importantly: 64-bit)? (Linux: =cat /etc/cpuinfo=)

#+end_notes

* R shell: Distribution license
#+NAME: fig:cli-2
#+attr_html: :width 600px:
[[../img/3_opening_R_2.png]]

- Open an R console (=M-x R=) to enter the following commands.

- Type ~license()~. What is "GNU"?
  
#+begin_notes
As you'll find out when following the instructions in figure
[[fig:cli-2]] by entering ~license()~ at the prompt, the R software is
distributed "under the terms of the [[https://www.gnu.org/licenses/quick-guide-gplv3.html][GNU General Public License]]"
(GPL). Popular software also distributed under the GPL include the
Linux "kernel" (the core of the operating system), and the GNU
compiler collection. You may have heard of the term "open source",
which essentially means the same thing, though one may quibble (and
[[https://opensource.com/article/17/11/open-source-or-free-software][people do, a lot]]). What's important to remember: use of the GPL (=
making R "free software") has contributed enormously to the success
of this language.

*Challenge:* what is "GNU software" exactly? Which programs belong
to it? Are there any programs that you have used before? [[gnu][(Hint)]]
#+end_notes

* R shell: The R project
#+NAME: fig:cli-3
#+attr_html: :width 600px:
[[../img/3_opening_R_3.png]]

Open an R console (=M-x R=) to enter the following commands.

- Enter ~citation()~. Why cite software?

- Enter ~contributors()~. Who can contribute?

  #+begin_notes
  Behind R is a large project of volunteers (figure [[fig:cli-3]]. At it
  centre is the "R Core Group" of developers. Because R is part of
  the "GNU suite" of programs, and because its predecessor was called
  S, it is also sometimes called "GNU S". [[becker][Becker (2004)]] has written
  an interesting historical account of S. When using R for analysis
  in a thesis, a paper, an essay or a blog post, one should cite it
  as a source. This is what the code ~citation()~ is for. Same goes
  for specific packages (more on this later) like "~data.table~" that
  are not part of Base-R. The citation alternatives may also prompt
  you to check out [[https://en.wikipedia.org/wiki/LaTeX][~LaTeX~]] and [[https://en.wikipedia.org/wiki/BibTeX][~BibTeX~]], which are quasi-standards
  for the professional (and beautiful!) formatting of scientific
  papers.

  *Challenge:* is there any connection between R and LaTeX? Or more
  general between the programming language R und markup languages
  (like HTML or LaTeX)? [[latex][(Hint)]]
  #+end_notes

* R shell: Demo and help
#+NAME: fig:cli-4
#+attr_html: :width 600px:
[[../img/3_opening_R_4.png]]

Open an R console (=M-x R=) to enter the following commands.

1) Enter ~demo(graphics)~ for some graphics examples.

2) Enter ~help.start()~ - where is this page?
   #+begin_src R :session *R* :results output :exports both
     help.start()
   #+end_src

   #+RESULTS:
   : starting httpd help server ... done
   : If the browser launched by 'xdg-open' is already running, it is *not* restarted, and you must
   :     switch to its window.
   : Otherwise, be patient ...

3) Calling ~help~ or ~?~ on Linux opens the manual page for the item
   (don't do this in a code block but in the R console):
   #+begin_example R
     ?Nile
     help(mtcars)
   #+end_example

   #+begin_notes
   The section higlighted in figure [[fig:cli-4]] suggests a few commands
   that you ought to try for yourself:

   ~help()~ is a function to get help for whatever you put in between
   the brackets. A quick win is ~help(help)~, or help about the help
   function. The format of the help pages is borrowed from the [[https://en.wikipedia.org/wiki/Man_page][Unix
   man[ual] pages]]. An alternative to ~help()~ is ~?~ followed by the
   term you need help with, e.g. ~?help~, which is the same as
   ~help(help)~ but much shorter. Lastly, ~help.start()~ opens a
   browser window with help in HTML format. Very useful access to a
   wealth of systematic information. If you don't know the exact name,
   you can also search across all documentation using ~help.search()~
   or the shortcut ~??~. Try entering ~??cars~ if you are looking for
   datasets on cars. You'll find that there are four known datasets
   with cars in different packages.

   Via the dataset search, you can also find out that functions like
   ~help()~ or ~demo()~ are part of the ~utils~ package - respective
   functions are listed as ~utils::[function]~. It contains all sorts
   of functions for housekeeping and administration.

   The R help system is however not written for beginners. Personally,
   I more often go to textbooks or, preferably, to stackoverflow.com if
   I have a question or need to remind myself of a command or a way of
   doing things.

   There are a few interactive demo programs available, too. You should
   try ~demo(graphics)~ and marvel at the various possibilities of R to
   create plots with your data. Notice how few lines of code are
   sufficient to create great effects! The window that opens when you
   execute the demo commands is the standard graphics output when using R
   in command-line mode.
   #+end_notes

* R environment: working directory
#+NAME: fig:cli-5
#+attr_html: :width 600px:
[[../img/3_opening_R_5.png]]

Open an R console (=M-x R=) to enter the following commands.

1) Enter ~getwd()~ ("get working dir")
   #+begin_src R :session *R* :results output :exports both
     getwd()
   #+end_src

   #+RESULTS:
   : [1] "/home/marcus/GitHub/ds1"

2) Use ~setwd()~ to change directory to your user home directory (=$HOME=):

   - Using a relative path address: from the current location (=.=)
     #+begin_src R
       setwd("..")
       getwd()
     #+end_src

     #+RESULTS:
     : /home/marcus/GitHub/ds1

   - Using an absolute path address: from the root directory (=/=)
     #+begin_src R
       setwd("/home/aletheia")
       getwd()
     #+end_src

3) Use ~system~ to run =bash= shell commands from inside R:
   #+begin_src R :session *R* :results output :exports both
     system("pwd")  # present working directory
   #+end_src

   #+RESULTS:
   : /home/marcus/GitHub/ds1/org

   A file listing command:
   #+begin_src R :session *R* :results output :exports both
     system("ls") # list files
   #+end_src

   #+RESULTS:
   #+begin_example
    0_overview.org
    1_infrastructure_DataLab.org
    1_infrastructure_Emacs.org
    1_infrastructure_Google_Cloud_Shell.org
    1_infrastructure_Google_Cloud_Shell_pdf.org
    2_datascience.org
    2_datascience_reveal.html
    2_datascience_reveal.org
    2_datascience_reveal_print.org
    3d_scatterplot.png
   '#3_introR.org#'
    3_introR.org
    3_introR_practice.org
    hello.txt
    mtcars.png
    notes.org
    Rpractice.org
    syllabus.org
    syllabus_pdf.org
    test2.R
    testPython.org
    test.R
    testR2.org
    testR3.org
    testR3.org~
    testR.org
    test.Rout
   #+end_example

   A shell pipe with a file listing and a counting command combined:
   #+begin_src R :session *R* :results output :exports both
     system("ls -la | wc -l") # count number of lines in file listing
   #+end_src

   #+RESULTS:
   : 33

#+begin_notes
When you start R, you may be asked, which working directory you wish
to use. This is where all files created (e.g. plots) will be put and
where R will look first to load scripts with R commands for execution.

The [[https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/getwd][setwd()]] command in figure [[fig:cli-5]] allows you to set any
directory as working directory. To check which one is used right
now, you can use [[https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/getwd][getwd()]].

How you specify the path to the current working directory depends on
your operating system, e.g. ~/home/marcus~ for my home directory on
MacOS/Linux, or ~C:\Users\Marcus~ under Windows. Especially as a
Windows user, you should look at your file organisation - this will
pay off as soon as you use the terminal or command-line. The Bash
shell that I use on my Linux computer (and that most MacOS users
will use) is also available within Windows 10 [[posey][(Posey 2018]]).
#+end_notes

* R display ~options~
#+NAME: fig:cli-6
#+attr_html: :width 550px:
[[../img/3_opening_R_6.png]]

Open an R console (=M-x R=) to enter the following commands.

1) The function =options= controls all glocal options for R:
   #+begin_example R
     help(options)
   #+end_example

2) =options= is a list:
   #+begin_src R :session *R* :results output :exports both
     class(options())   # `class` returns the data type
   #+end_src

   #+RESULTS:
   : [1] "list"

3) You can look at it:
   #+begin_src R :session *R* :results output :exports both
     options()
   #+end_src

   #+RESULTS:
   #+begin_example
   $add.smooth
   [1] TRUE

   $bitmapType
   [1] "cairo"

   $browser
   [1] "xdg-open"

   $browserNLdisabled
   [1] FALSE

   $CBoundsCheck
   [1] FALSE

   $check.bounds
   [1] FALSE

   $citation.bibtex.max
   [1] 1

   $continue
   [1] "+ "

   $contrasts
           unordered           ordered 
   "contr.treatment"      "contr.poly" 

   $crayon.enabled
   [1] FALSE

   $defaultPackages
   [1] "datasets"  "utils"     "grDevices" "graphics"  "stats"     "methods"  

   $demo.ask
   [1] "default"

   $deparse.cutoff
   [1] 60

   $device
   function (display = "", width, height, pointsize, gamma, bg, 
       canvas, fonts, family, xpos, ypos, title, type, antialias, 
       symbolfamily) 
   {
       if (display != "XImage") {
           check <- Sys.getenv("_R_CHECK_SCREEN_DEVICE_", "")
           msg <- "screen devices should not be used in examples etc"
           if (identical(check, "stop")) 
               stop(msg, domain = NA)
           else if (identical(check, "warn")) 
               warning(msg, immediate. = TRUE, noBreaks. = TRUE, 
                   domain = NA)
       }
       if (display == "" && .Platform$GUI == "AQUA" && is.na(Sys.getenv("DISPLAY", 
           NA))) 
           Sys.setenv(DISPLAY = ":0")
       new <- list()
       if (!missing(display)) 
           new$display <- display
       if (!missing(width)) 
           new$width <- width
       if (!missing(height)) 
           new$height <- height
       if (!missing(gamma)) 
           new$gamma <- gamma
       if (!missing(pointsize)) 
           new$pointsize <- pointsize
       if (!missing(bg)) 
           new$bg <- bg
       if (!missing(canvas)) 
           new$canvas <- canvas
       if (!missing(xpos)) 
           new$xpos <- xpos
       if (!missing(ypos)) 
           new$ypos <- ypos
       if (!missing(title)) 
           new$title <- title
       if (!checkIntFormat(new$title)) 
           stop("invalid 'title'")
       if (!missing(type)) {
           new$type <- match.arg(type, c("Xlib", "cairo", "nbcairo", 
               "dbcairo"))
           if (!capabilities("cairo") && type != "Xlib") 
               warning("cairo-based types are not supported on this build - using \"Xlib\"")
       }
       if (!missing(family)) 
           new$family <- family
       if (!missing(fonts)) 
           new$fonts <- fonts
       if (!missing(antialias) && type != "Xlib") 
           new$antialias <- match.arg(antialias, aa.cairo)
       if (!missing(symbolfamily)) 
           new$symbolfamily <- symbolfamily
       d <- check.options(new, name.opt = ".X11.Options", envir = .X11env)
       if (d$type == "Xlib" && !missing(family)) {
           fns <- X11Fonts()
           if (!family %in% names(fns)) 
               stop("unknown family for X11(type = \"XLib\")")
           d$fonts[1] <- fns[[family]]
       }
       type <- if (capabilities("cairo")) 
           switch(d$type, cairo = 1L, nbcairo = 2L, dbcairo = 3L, 
               0L)
       else 0L
       if (display == "XImage") 
           type <- 0L
       antialias <- match(d$antialias, aa.cairo)
       if (grepl("darwin", R.version$os)) 
           check_for_XQuartz()
       .External2(C_X11, d$display, d$width, d$height, d$pointsize, 
           d$gamma, d$colortype, d$maxcubesize, d$bg, d$canvas, 
           d$fonts, NA_integer_, d$xpos, d$ypos, d$title, type, 
           antialias, d$family, optionSymbolFont(d$symbolfamily))
       invisible()
   }
   <bytecode: 0x55dfac41c060>
   <environment: namespace:grDevices>

   $device.ask.default
   [1] FALSE

   $digits
   [1] 7

   $dvipscmd
   [1] "dvips"

   $echo
   [1] TRUE

   $editor
   [1] "emacsclient"

   $encoding
   [1] "native.enc"

   $example.ask
   [1] "default"

   $expressions
   [1] 5000

   $help.search.types
   [1] "vignette" "demo"     "help"    

   $help.try.all.packages
   [1] FALSE

   $HTTPUserAgent
   [1] "R (4.1.2 x86_64-pc-linux-gnu x86_64 linux-gnu)"

   $internet.info
   [1] 2

   $keep.parse.data
   [1] TRUE

   $keep.parse.data.pkgs
   [1] FALSE

   $keep.source
   [1] TRUE

   $keep.source.pkgs
   [1] FALSE

   $length
   [1] 99999

   $locatorBell
   [1] TRUE

   $mailer
   [1] "mailto"

   $matprod
   [1] "default"

   $max.print
   [1] 99999

   $menu.graphics
   [1] TRUE

   $na.action
   [1] "na.omit"

   $nwarnings
   [1] 50

   $OutDec
   [1] "."

   $pager
   [1] "cat"

   $papersize
   [1] "letter"

   $PCRE_limit_recursion
   [1] NA

   $PCRE_study
   [1] FALSE

   $PCRE_use_JIT
   [1] TRUE

   $pdfviewer
   [1] "/usr/bin/xdg-open"

   $pkgType
   [1] "source"

   $printcmd
   [1] "/usr/bin/lpr"

   $prompt
   [1] "> "

   $repos
                            CRAN 
   "https://cloud.r-project.org" 

   $rl_word_breaks
   [1] " \t\n\"\\'`><=%;,|&{()}"

   $scipen
   [1] 0

   $show.coef.Pvalues
   [1] TRUE

   $show.error.locations
   [1] TRUE

   $show.error.messages
   [1] TRUE

   $show.signif.stars
   [1] TRUE

   $STERM
   [1] "iESS"

   $str
   $str$strict.width
   [1] "no"

   $str$digits.d
   [1] 3

   $str$vec.len
   [1] 4

   $str$list.len
   [1] 99

   $str$deparse.lines
   NULL

   $str$drop.deparse.attr
   [1] TRUE

   $str$formatNum
   function (x, ...) 
   format(x, trim = TRUE, drop0trailing = TRUE, ...)
   <environment: 0x55dface3cb10>


   $str.dendrogram.last
   [1] "'"

   $stringsAsFactors
   [1] FALSE

   $texi2dvi
   [1] "/usr/bin/texi2dvi"

   $timeout
   [1] 60

   $ts.eps
   [1] 1e-05

   $ts.S.compat
   [1] FALSE

   $unzip
   [1] "/usr/bin/unzip"

   $useFancyQuotes
   [1] TRUE

   $verbose
   [1] FALSE

   $warn
   [1] 0

   $warning.length
   [1] 1000

   $width
   [1] 118
   #+end_example

4) You can extract display options with ~$~, e.g. for the R console
   prompt:
   #+begin_src R :session *R* :results output :exports both
     options()$prompt
   #+end_src

   #+RESULTS:
   : [1] "> "

5) Another important option setting is for the repository that R uses
   to download packages: Set to the default CRAN repo in my ~.Rprofile~
   #+begin_src R :session *R* :results output :exports both
     options()$repos
   #+end_src

   #+RESULTS:
   :                          CRAN 
   : "https://cloud.r-project.org"

6) Change the shell prompt to ~R>~:
   #+begin_src R :session *R* :results output :exports both
     options(prompt = "R> ")
   #+end_src

   #+RESULTS:

7) The change affects only your current R session. Change to the ~*R*~
   console buffer to check this:
   #+begin_example R
   > setwd('/home/aletheia/GitHub/ds1/org/')
   > options(prompt="R> ")
   'org_babel_R_eoe'
   R> [1] "org_babel_R_eoe"
   R>
   #+end_example

8) On the R console, change the prompt back to what it was.
   #+begin_example
   R>
   R> options(prompt="> ")
   >
   > options()$prompt
   [1] "> "
   >
   #+end_example

#+begin_notes
Figure [[fig:cli-6]] shows a new utility command, ~options()~, that you
can use to change the identifying prompt at the beginning of the
command line. You don't have to do this but it's nice to know that
and how you can do it. One of the advantages of working on the
command-line is that you experience how you can adapt your working
environment to your personal needs - something that most graphical
environments do not allow you do to (at least not without a lot more
effort). Freedom of extensibility is the name of the command-line
game.
#+end_notes

* R computing and commenting
#+NAME: fig:cli-8
#+ATTR_HTML: :height 300 px
[[../img/3_opening_R_8.png]]

1) In the R console compute 2 + 2 (code block, =*R*= buffer or terminal)
2) Pass the operation ~2+2~ as an argument to the ~print~ function
3) Run both operations again but with an inline comment
4) Put the code into an R script ~print.R~ (C-x C-f)
5) Open a shell with ~M-x shell~ and run the script there.
6) Run the script again but as a background "batch" job.

#+begin_notes
One of the advantages of the interactive command-line is the ability
to perform arithmetic operations. In figure [[fig:cli-8]] we begin with
a simple addition. We'll do a lot more of this in the next
section. When you type the command and click ~ENTER~, R responds by
printing out the result without the need to explicit instruct it
using a ~print~ command (though as you can see, this works as
well). You also see here that ~#~ is the R sign for a comment (which
is ignored upon execution). The ominous ~[1]~ at the beginning of
each output line indicates the number of columns printed. R does
this because it is strongest when manipulating tabular data - data
ordered in columns and rows.
#+end_notes

* R packages

- Packages contain functions and data sets
- Most packages must be installed and loaded first
- Default data sets are pre-loaded: ~?datasets~

#+attr_html: :width 200px
#+caption: MASS is from the book by Venables/Ripley (2002)
[[../img/3_MASS.png]]

* Install R packages
#+NAME: fig:cli-9
#+attr_html: :width 600px
[[../img/3_opening_R_9.png]]

- To install package "~MASS~": enter ~install.packages("MASS")~

- Installation includes identifying location on your computer: you may
  have to do it on the R console and confirm creation of a local repo

- Installation downloads compressed /tarball/ from a CRAN mirror site

- ~md5sum~ is a GNU utility program that checks correct file transfer

- Package version and R version may be out of sync

* Installing older versions of packages for older version of R

For example for the =MASS= package: check your R =version= and then pick
an earlier package version using the [[https://cran.r-project.org/src/contrib/Archive/MASS/][CRAN archive]].

For example, if you have R version 4.0.4 (2021-02-15), then version
7.3.54 from 2021-05-03 is a safe bet:
#+begin_example R

  install.packages("remotes")

  require(remotes)
  
  install_version("MASS", version="7.3.54")
  
  library(MASS)
  
  search()  # MASS appears in environment list
#+end_example

* Miscellaneous package commands

*Open an R console (=M-x R=) to enter the following commands.*

- For a list of currently loaded packages: ~search()~

- To load a package into current R session only: ~library("...")~

- ~data()~ will list all datasets for all installed packages

- To uninstall a package, use ~remove.packages("[pkgname]")~:
  for example, install =dyplr=, load it, and then remove it again.

- Close your R console (where ~dplyr~ is still loaded), open a new one,
  and try to load it.

- To see all installed packages: ~installed.packages()~

- That's a lot of packages. To look only at the top/bottom of the
  list, pipe (~|>~) the command into ~head()~ and ~tail()~:
  #+begin_example R
  installed.packages() |> head()  # top of the list
  installed.packages() |> tail()  # bottom of the list
  #+end_example

- To update packages: ~update.packages()~ (this can take a while and
  you'll have to confirm updates - run it and =cancel=.)

- For a short package description: ~packageDescription("...")~. Get the
  description for the =base= package:

  #+begin_src R :session *R* :results output :exports both
    packageDescription("base")
  #+end_src

- To see all datasets in a package: ~data(package="...")~. List all
  datasets in the base R datasets collection =datasets=:

  #+begin_src R :session *R* :results output :exports both
    data(package="datasets")
  #+end_src

- For a list of search paths (to find pkgs): ~searchpaths()~
  #+begin_src R :session *R* :results output :exports both
    searchpaths()
  #+end_src

- To list functions in a package, use =lsf.str= for lots of detail, or
  =ls= for an overview - you must load the package first:
  #+begin_src R :session *R* :results output :exports both
    library(MASS)
    ls("package:MASS")
    lsf.str("package:MASS")
  #+end_src

* Load datasets

- After loading a package that contains data sets, the data sets are
  not loaded (they may be very large).

- To load a data set contained in package, use ~data([name])~.

- You can (often) get help on datasets with ~?~ or ~help([name])~ [fn:3]

- Example: =phones= data set in the =MASS= package - add and remove it
  #+begin_src R :session *R* :results output :exports both
    ls()  # user-defined data that are loaded in the current session
    library(MASS) # load MASS package
    ls()
    rm(list=ls())
    ls()
  #+end_src

- Why is the printout of the empty listing =character(0)=?
  #+begin_src R :session *R* :results output :exports both
    ls()
    class(ls())  # ls() is a `character` vector
  #+end_src

* Explore data (lightly)

- When you've loaded a data set, you should take a look at it.

- Most useful: ~str~ to see the data structure, ~head~ and ~tail~ to see the
  first and last few rows.

  Structure:
  #+begin_src R :session *R* :results output :exports both
    str(ToothGrowth)  # structure of built-in ToothGrowth dataset
  #+end_src

  #+RESULTS:
  : 'data.frame':       60 obs. of  3 variables:
  :  $ len : num  4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ...
  :  $ supp: Factor w/ 2 levels "OJ","VC": 2 2 2 2 2 2 2 2 2 2 ...
  :  $ dose: num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...

  Head: To display =m= rows only, add the parameter ~n = m~.
  #+begin_src R :session *R* :results output :exports both
    head(ToothGrowth, n = 3)
  #+end_src

  #+RESULTS:
  :    len supp dose
  : 1  4.2   VC  0.5
  : 2 11.5   VC  0.5
  : 3  7.3   VC  0.5

  Tail:
  #+begin_src R :session *R* :results output :exports both
    tail(ToothGrowth, n = 3)
  #+end_src

  #+RESULTS:
  :     len supp dose
  : 58 27.3   OJ    2
  : 59 29.4   OJ    2
  : 60 23.0   OJ    2

- These functions have many different attributes (check the help).

* NEXT Practice: R package commands

*Open an R console (=M-x R=) to enter the following commands.*

2) [Install the ~MASS~ package with ~install.packages~ IF NOT DONE YET]
   #+begin_example R
     install.packages("MASS")
   #+end_example

3) List all data sets in ~MASS~ with ~data(package="MASS")~
   #+begin_src R :session *R* :results output :exports both
     data(package="MASS")
   #+end_src

4) Open the ~help~ for the data set ~Boston~ in ~MASS~ - how many rows
   (observations) and columns (variables) does it have?
   #+begin_example R
     help(Boston)
   #+end_example
   
5) Load the ~MASS~ package into your current R session
   #+begin_src R :session *R* :results none :exports both
     library(MASS)
   #+end_src

6) Load the data set ~Boston~ into your current R session
   #+begin_src R :session *R* :results none :exports both
     data(Boston)
   #+end_src

7) List all loaded packages with ~search()~
   #+begin_src R :session *R* :results output :exports both
     search()
   #+end_src
   
8) List all loaded objects with ~ls()~ (which output do you expect?)
   #+begin_src R :session *R* :results output :exports both
     ls()
   #+end_src

9) Display the structure of ~Boston~ with ~str(Boston)~
   #+begin_src R :session *R* :results output :exports both
     str(Boston)
   #+end_src
   
10) Display the first *three* rows of ~Boston~ with ~head~
    #+begin_src R :session *R* :results output :exports both
      head(Boston,3)
    #+end_src
    
11) Check loaded object list with ~ls()~, then remove all loaded objects
    with ~rm(list=ls())~
    #+begin_src R :session *R* :results output :exports both
      ls()
      rm(list=ls())
      ls()
    #+end_src

12) List loaded packages with ~search()~. Then detach the ~MASS~ package
    with ~detach("package:MASS")~ and list the loaded packages again.
    #+begin_src R :session *R* :results output :exports both
      search()
      detach("package:MASS")
      search()
    #+end_src

* Saving your workspace

- When you quit an R session with ~q()~ or ~quit()~, you're asked if you
  want to save the /workspace image/.

- The workspace image includes all objects that were defined in the
  session, like loaded libraries, datasets, variables etc.

- In the current directory, R saves your command history (in a
  readable text file ~.Rhistory~), and all data (in a machine-readable
  file ~.RData~).

- Quit a current R session with ~y~ and check those files out (open a
  =Dired= buffer with =C-x C-d= or find them with =C-x C-f=.

* Customizing at startup

- When you install packages, you do not need administrative rights,
  even if R is installed in a read-only portion of your computer. The
  OS will offer you to install packages in a user directory.

- When downloading the package as part of the installation or updating
  process, Windows forces you to pick a mirror. You can disable this
  by creating your own ~~/.Rprofile~ file and specifying a download
  mirror.
  + Saved R commands: ~.Rhistory~
  + Saved R variables: ~.RData~
  + R profile settings: ~.Rprofile~

- See also: [[https://www.r-bloggers.com/2014/09/fun-with-rprofile-and-customizing-r-startup/]["Fun with .Rprofile and customizing R startup"]]
  (Fischetti, 2014)

* Practice: Customizing at startup

*Open an R console (=M-x R=) to enter the following commands.*

1) Check where the R home is:
   #+begin_src R :session *R* :results output :exports both
     R.home(component="home")
   #+end_src

2) Check if there's a system-wide ~.Rprofile~ configuration file:
   #+begin_src R :session *R* :results output :exports both
     system("cd /usr/lib/R; ls -la .Rprofile")  # must use R's Home directory
   #+end_src

3) Find out which directory Emacs (and R) consider to be your ~$HOME~:
   #+begin_src R :session *R* :results output :exports both
     system("echo $HOME") # $HOME is the the same as ~/
   #+end_src

4) Create a file ~.Rprofile~ in your Emacs ~$HOME~ directory and put the
   following lines into it [fn:4]:
   #+begin_example R
   options(repos=c("https://mirrors.nics.utk.edu/cran/"))
   options(crayon.enabled = FALSE)
   message("*** Loaded .Rprofile ***")
   #+end_example

5) Open a new R shell and display the value of ~options()$repos~ that
   you just reset. Every time a new R shell is started, ~.Rprofile~ is
   read. Make sure that the ~message~ is displayed.
   #+begin_src R :session *R* :results output :exports both
     options()$repos
   #+end_src

   #+RESULTS:
   : [1] "https://mirrors.nics.utk.edu/cran/"

7) Install the ~remotes~ package from the new location.
   #+begin_example R
     install.packages("remotes")
   #+end_example
   
* The RStudio IDE
#+attr_html: :width 600px
[[../img/3_rstudio.png]]

- RStudio is a popular (FOSS) IDE for R with literate programming
  capabilities (it supports interactive R Notebooks)

- We're not using RStudio ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#are-we-going-to-use-rstudio][why]]) but Emacs + ESS + Org-mode instead

- You can [[https://www.rstudio.com/products/rstudio/download/][download RStudio from here]] - perhaps you learn to like
  it[fn:5]

* Concept Summary

- R is an easy to *learn* language to quickly and interactively analyse
  datasets. R is especially strong on visualization.

- R can be downloaded from ~r-project.org~ and installed on your
  computer.

- There is plenty of *help* on R available from within the program, or
  on the Internet using the wider community of practitioners.

- When you open R, you establish a working *environment*, which includes
  packages, functions and variables.

* Code summary

| TERM                       | MEANING               |
|----------------------------+-----------------------|
| ~license()~, ~licence()~       | License info          |
| ~help()~, ~?help~              | get help              |
| ~??[name]~                   | check occurrences     |
| ~demo()~                     | R demos               |
| ~getwd()~, ~setwd()~           | get/set working dir   |
| ~options(prompt=)~           | set prompt            |
| ~options(repos=)~            | set download repo     |
| ~options()$prompt~           | display prompt        |
| ~options()$repos~            | display download repo |
| ~print(1+1)~                 | result of ~1+1~         |
| ~quit()~, ~q()~                | leave R               |
| ~# ...~                      | comment               |
| ~library("MASS")~            | load                  |
| ~detach("package:[name]")~   | unload package        |
| ~install.packages("MASS")~   | install               |
| ~installed.packages()~       | list all packages     |
| ~update.packages()~          | update                |
| ~packageDescription("MASS")~ | describe              |
| ~help(package="MASS")~       | show                  |
| ~data()~                     | built-in datasets     |
| ~search()~                   | list loaded pkgs      |
| ~searchpaths()~              | list pkg search paths |
| ~ls()~                       | list loaded objects   |
| ~rm(list=ls())~              | unload objects        |

* What next?

#+attr_html: :width 400px
#+caption: HAL 9000 interface (Kubrick's 2001 Space Odyssey)
[[../img/3_2001.jpg]]

See also: [[https://youtu.be/ARJ8cAGm6JE][HAL 9000: "I'm sorry Dave, I'm afraid I can't do that."]]

* What now? read!

#+NAME: fig:read
#+ATTR_HTML: :width 400 px
[[../img/3_read.jpg]]

- Read frequently and widely
- Go both deep and stay shallow: You've seen that I don't just cite
  peer-reviewed papers but blog posts, too. The truth is that I have
  personally learnt a lot more from them than from scientific
  papers. However, this is partly a function of my experience and
  skill. Without these, it might be hard to distinguish what's good
  and bad - just like when you google any topic you don't know
  anything about yet. But even if you're a bloody beginner, I
  recommend reading widely and both deeply (with a lot of focus,
  e.g. when looking up terms, repeating analyses and retyping code)
  and shallowly (skimming articles, reading comments), because you
  build an associative network of terms, arguments and practices. I
  follow a bunch of data science experts on [[https://twitter.com/birkenkrahe][Twitter]] for the same
  reason. If you do this for any topic that is being discussed on a
  factual (rather than an overly political or emotional) basis,
  you'll learn more faster[fn:6].
- For example: take a look at "[[https://rweekly.org/][R Weekly]]" for a weekly, curated
  collection of articles from the R community. This will give you an
  idea of the spread of information.

* What now? play!

#+NAME: fig:play
#+ATTR_HTML: :width 400 px
[[../img/3_play.jpg]]

[[https://drkeithmcnulty.com/2020/06/23/data-scientists-should-learn-through-play/][Read: Data Scientists Should Learn Through Play]]

To understand why you should play (see figure [[fig:play]]), check the
article by an active blogger and professional in the R-blogosphere,
Keith McNulty, who leads data science at the global strategy
consulting firm McKinsey & Co. He argues that "learning through
playing around" with the software is a good way to learn ([[mcnulty][McNulty
2020]]) - I agree. Though I am often distracted by having to create
teaching material for you, playing around on or off the command-line,
looking at interesting data and combing through them using the
analytical tools R offers, or checking other people's plots or
inferences, is the most fun way of learning R. There's nothing wrong
with reading or working through a course, watching teaching videos, of
course, either.  #+end_notes

* What's the next topic?

[[../img/3_maths.gif]]

Arithmetic with R

* References
<<references>>
- <<alvarez>> Adolfo Alvarez (25 Mar 2019). R Packages: A Beginner's
  Guide. Online: [[https://www.datacamp.com/community/tutorials/r-packages-guide][datacamp.com]].
- <<becker>> Robert Becker (2004). A Brief History of S. Online:
  [[http://sas.uwaterloo.ca/~rwoldfor/software/R-code/historyOfS.pdf][sas.waterloo.ca]].
- <<davies>> Tilman M. Davies (2016). [[https://nostarch.com/bookofr][The Book of R. No Starch Press.]]
- Tony Fischetti (September 17, 2014). Fun with .Rprofile and
  customizing R startup. URL: [[https://www.r-bloggers.com/2014/09/fun-with-rprofile-and-customizing-r-startup/][R-bloggers.com]].
- <<gallatin>> Kyle Gallatin (1 Nov 2018). Some Important Data
  Science Tools that arenât Python, R, SQL or Math. Online:
  [[https://towardsdatascience.com/some-important-data-science-tools-that-arent-python-r-sql-or-math-96a109fa56d][towardsdatascience.com]].
- <<grogan>> Michael Grogan (23 Jul 2020). How R Still Excels
  Compared To Python. Online: [[https://towardsdatascience.com/ways-r-still-excels-compared-to-python-34835e6071ee][towardsdatascience.com.]]
- <<knuth>> Knuth D (1992). [[http://www.literateprogramming.com/knuthweb.pdf][Literate Programming]]. Stanford, Center
  for the Study of Language and Information Lecture Notes 27.
- <<matloff>> Norman Matloff (2019). TidyverseSceptic. Online:
  [[https://github.com/matloff/TidyverseSkeptic][github.com]].
- <<mcnulty>> Keith McNulty (23 Jun 2020). Data Scientists Should
  Learn Through Play. Online: [[https://drkeithmcnulty.com/2020/06/23/data-scientists-should-learn-through-play/][drkeithmcnulty.com]].
- <<muenchen>> Robert A. Muenchen (2017). Why R is Hard to
  Learn. Online: [[http://r4stats.com/articles/why-r-is-hard-to-learn/][r4stats.com]].
- <<posey>> Brien Posey (5 Feb 2018). How To Navigate the File
  System in Windows 10's Bash Shell. Online: [[https://redmondmag.com/articles/2018/02/05/navigate-bash-file-system.aspx][redmondmag.com]].
- <<radecic>> Dario Radecic (10 Sept 2020). Trying R for the First
  Time. Online: [[https://towardsdatascience.com/ive-tried-r-for-the-first-time-how-bad-was-it-ba344f22e90b][towardsdatascience.com]].
- <<shotwell>> Gordon Shotwell (30 Dec 2019). Why I use R. Online:
  [[https://blog.shotwell.ca/posts/why_i_use_r/][blog.shotwell.ca]].
- <<uprety>> Sagar Uprety (23 Jul 2020). Data Cleaning and
  Exploratory Analysis in Python and R. Online: [[https://towardsdatascience.com/data-cleaning-and-exploratory-analysis-in-python-and-r-608de56124e2][towardsdatascience.com]].
- [[https://link.springer.com/book/10.1007/978-0-387-21706-2][Venables/Ripley (2002). Modern Applied Statistics with
  S. Springer]]. Online: [[https://www.researchgate.net/publication/224817420_Modern_Applied_Statistics_With_S][researchgate.net]].
- <<zeng>> Yuleng Zeng (28 Aug 2018). An Introduction to R and
  LaTeX. Online: [[https://bookdown.org/Yuleng/introrlatex/][bookdown.org]].
- R Core Team (2022). R: A language and environment for statistical
  computing. R Foundation for Statistical Computing, Vienna, Austria.
  URL https://www.R-project.org/.

* Hints
<<challenges>>
** Download from CRAN
<<mirror>> [[https://en.wikipedia.org/wiki/Mirror_site][Mirror sites]] are called that way because they are actual
identical copies of the original site. The quality of the cloned
page is monitored. [[https://cran.r-project.org/mirmon_report.html][The result looks interesting]] (to me). You can
see how well maintained a particular mirror site is.
** Opening R for the first time
<<r-project>> The projects listed here (by no means a complete
list!) are divided in applications and infrastructure
projects. *Applications* of R include bioinformatics (e.g. in the
medical sciences or in genomics), geospatial statistics (anything
related to maps), and finance (R is strong with this
one!). *Infrastructure* includes incorporation of R in Wikis (like
Wikipedia) - for example to generate plots on the fly - and ESS
("Emacs Speaks Statistics"), which is the interface to the
extensible text editor that I'm using (e.g. to create all
documentation for this course - essentially from one text file). An
alternative to ESS is the highly popular IDE (Integrated
Development Environment) RStudio. We will not be using it in this
course but I encourage you to check it out, try it and see if you
like it, especially if my teaching tempo is too slow for you!
** Distribution license
<<gnu>> Go to [[https://www.gnu.org/software/software.html][GNU Software]] to see a list of all programs
distributed under the GPL. These programs constitute the GNU system
of free software. Looking through the list, I noticed the following
programs that I have used: Chess (chess game implementation), Emacs
(extensible text editor that I am using in this very moment), Gimp
(image manipulation), Gnome (desktop for my operating system,
Ubuntu Linux), and so on...425 programs are listed here alone (29
Aug 2020).
** The R Project
<<latex>> There is no special connection between LaTeX and R,
except that both are free software programs, one for formatting
(especially when mathematical formulas need to be presented), the
other one for statistical calculations and visualisation. However,
to communicate data analysis results and to make the analysis
process itself reproducible, a combination between these two goals
(formatting/programming) is desirable. This is exactly what
"literate programming" ([[knuth][Knuth 1984]]) does. There is also a program called "R
Markdown" to create documents that enables you e.g.  to created
HTML, PDF, ePUB and Kindle books with only one source. You can find
examples at [[https://bookdown.org/][bookdown.org]]. See also [[zeng][Zeng (2018)]] for a brief
introduction to both R and LateX - sufficient to get started -
written apparently as a minimal example for bookdown. For LaTeX
there are also cloud editors like [[https://www.overleaf.com/][overleaf.com]].
** R Packages
<<package>> You can directly search for this dataset - I usually
take the search string "~r doc [name]~, in this case ~r doc MASS
boston~, which gets me straight [[https://www.rdocumentation.org/packages/MASS/versions/7.3-52/topics/Boston][to this page]]. At the top, you can
read that "The ~Boston~ data frame has 506 rows and 14
columns". There's also an R Notebook, which shows various aspects
of this dataset.

Another way to find the answer is by using the command ~str()~ that
you already know: ~str(Boston~ contains the answer in the first
line - as long as ~MASS~ has been loaded. (Check out what happens
if not by closing the R session with ~q()~ (don't save the
workspace) and reopening it again.

The simplest way is to type ~help(Boston)~ (again, only after
loading the ~MASS~ package).

* Footnotes

[fn:1]To open the R console, and direct plots to the correct device,
the R program needs to be "plugged into" your operating system, as it
were. You could still run it otherwise but e.g. you'd have to always
type the exact program path.

[fn:2]In fact, you can also save R instructions as a script and then
run them using the program ~Rscript~ or in batch mode with the command ~R
CMD BATCH~. We'll practice these commands in class.

[fn:3]Strictly speaking, the availability of help depends on the
package design - well written packages and data sets are well
documented and are accompanied by short and detailed descriptions, or
even papers (so-called "vignettes"). An example is the ~Rcpp~ package
that interfaces R and C++.

[fn:4]You can also re-set this home directory - [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-set-a-new-emacs-home-directory][this FAQ explains how]].

[fn:5]I don't like it because I think it's way too complicated but
some developers swear by it. It contains a script editor, an R
console, an environment buffer and a graphics buffer. It is fairly
customizable, but nowhere near as flexible as Emacs + ESS + Orgmode.

[fn:6]Data science is a mixed affair when it comes to this last tip:
because of the importance of statistics and models for COVID-19,
public discussions e.g. on X/Twitter are often instantly politicized
and emotionally charged. However, to be able to navigate these waters
and still extract the common good, is an important ability that is,
for me, also part of "data literacy". Learning how to read and discern
different views, focus on facts and problem-solving, while not
ignoring the wider problem setting, is my working definition of the
scientific method.
